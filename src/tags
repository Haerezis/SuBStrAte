!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
g_substrate_options	options.c	/^struct substrate_options g_substrate_options;$/;"	v	typeref:struct:substrate_options
main	substrate.c	/^int main(int argc,char** argv)$/;"	f	signature:(int argc,char** argv)
substrate_H_matrix_eq	utils.c	/^bool substrate_H_matrix_eq($/;"	f	signature:( struct osl_relation * access_relation1, struct osl_relation * access_relation2)
substrate_H_matrix_neq	utils.c	/^bool substrate_H_matrix_neq($/;"	f	signature:( struct osl_relation * access_relation1, struct osl_relation * access_relation2)
substrate_access_class_eq	utils.c	/^bool substrate_access_class_eq($/;"	f	signature:( struct osl_relation * access_relation1, struct osl_relation * access_relation2)
substrate_aggregate_osl_statements	statement_profile.c	/^struct osl_statement * substrate_aggregate_osl_statements($/;"	f	signature:( struct osl_statement * stmt1, struct osl_statement * stmt2)
substrate_aggregate_statement_profiles	statement_profile.c	/^struct substrate_statement_profile substrate_aggregate_statement_profiles($/;"	f	signature:( struct substrate_statement_profile stmt1, struct substrate_statement_profile stmt2)
substrate_analyze	analyze.c	/^struct substrate_scop_profile substrate_analyze(struct osl_scop * scop)$/;"	f	signature:(struct osl_scop * scop)
substrate_array_id_eq	utils.c	/^bool substrate_array_id_eq($/;"	f	signature:( struct osl_relation * access_relation1, struct osl_relation * access_relation2)
substrate_array_profile_add	reuse_struct.c	/^struct substrate_array_profile substrate_array_profile_add($/;"	f	signature:( struct substrate_array_profile ap1, struct substrate_array_profile ap2)
substrate_array_profile_clone	reuse_struct.c	/^struct substrate_array_profile substrate_array_profile_clone($/;"	f	signature:( struct substrate_array_profile ap)
substrate_array_profile_constructor	reuse.c	/^struct substrate_array_profile substrate_array_profile_constructor($/;"	f	signature:( struct osl_relation_list * array_access_rel_list)
substrate_array_profile_dump	reuse_struct.c	/^void substrate_array_profile_dump($/;"	f	signature:( FILE * output_stream, struct substrate_array_profile * ap)
substrate_array_profile_free	reuse_struct.c	/^void substrate_array_profile_free($/;"	f	signature:( struct substrate_array_profile * ap)
substrate_copy_scop_except_statements	utils.c	/^void substrate_copy_scop_except_statements($/;"	f	signature:( struct osl_scop * dest, struct osl_scop * source)
substrate_equivalence_class_add	reuse_struct.c	/^struct substrate_equivalence_class substrate_equivalence_class_add($/;"	f	signature:( struct substrate_equivalence_class ec1, struct substrate_equivalence_class ec2)
substrate_equivalence_class_clone	reuse_struct.c	/^struct substrate_equivalence_class substrate_equivalence_class_clone($/;"	f	signature:( struct substrate_equivalence_class ec)
substrate_equivalence_class_constructor	reuse.c	/^struct substrate_equivalence_class substrate_equivalence_class_constructor($/;"	f	signature:( struct osl_relation_list * array_references)
substrate_equivalence_class_dump	reuse_struct.c	/^void substrate_equivalence_class_dump($/;"	f	signature:( FILE * output_stream, struct substrate_equivalence_class * ec)
substrate_equivalence_class_free	reuse_struct.c	/^void substrate_equivalence_class_free($/;"	f	signature:( struct substrate_equivalence_class * ec)
substrate_get_array_id_from_access_relation	utils.c	/^osl_int_t substrate_get_array_id_from_access_relation($/;"	f	signature:( struct osl_relation * rel)
substrate_group_access_relations_by	utils.c	/^struct substrate_osl_relation_group_list substrate_group_access_relations_by($/;"	f	signature:( struct osl_relation_list * rl, bool (*by_function) (struct osl_relation *,struct osl_relation *))
substrate_optimize	optimization.c	/^struct osl_scop * substrate_optimize($/;"	f	signature:( struct substrate_scop_profile scop_profile)
substrate_option_free	options.c	/^void substrate_option_free()$/;"	f
substrate_osl_relation_group_list_realloc	utils.c	/^void substrate_osl_relation_group_list_realloc($/;"	f	signature:( struct substrate_osl_relation_group_list * group_list)
substrate_parse_options	options.c	/^void substrate_parse_options($/;"	f	signature:( int argc, char** argv)
substrate_print_help	options.c	/^void substrate_print_help($/;"	f	signature:( char *program_name, FILE * output)
substrate_rate_array_profiles	reuse.c	/^double substrate_rate_array_profiles($/;"	f	signature:( struct substrate_array_profile ap1, struct substrate_array_profile ap2)
substrate_rate_reuse_profiles	reuse.c	/^double substrate_rate_reuse_profiles($/;"	f	signature:( struct substrate_reuse_profile rp1, struct substrate_reuse_profile rp2)
substrate_rate_uniformly_generated_sets	reuse.c	/^double substrate_rate_uniformly_generated_sets($/;"	f	signature:( struct substrate_uniformly_generated_set ugs1, struct substrate_uniformly_generated_set ugs2)
substrate_reuse_profile_add	reuse_struct.c	/^struct substrate_reuse_profile substrate_reuse_profile_add($/;"	f	signature:( struct substrate_reuse_profile rp1, struct substrate_reuse_profile rp2)
substrate_reuse_profile_clone	reuse_struct.c	/^struct substrate_reuse_profile substrate_reuse_profile_clone($/;"	f	signature:( struct substrate_reuse_profile rp)
substrate_reuse_profile_constructor	reuse.c	/^struct substrate_reuse_profile substrate_reuse_profile_constructor($/;"	f	signature:( struct osl_statement * statement)
substrate_reuse_profile_dump	reuse_struct.c	/^void substrate_reuse_profile_dump($/;"	f	signature:( FILE * output_stream, struct substrate_reuse_profile * rp)
substrate_reuse_profile_free	reuse_struct.c	/^void substrate_reuse_profile_free($/;"	f	signature:( struct substrate_reuse_profile * rp)
substrate_scop_profile_free	statement_profile.c	/^void substrate_scop_profile_free($/;"	f	signature:( struct substrate_scop_profile * sp)
substrate_statement_profile_free	statement_profile.c	/^void substrate_statement_profile_free($/;"	f	signature:( struct substrate_statement_profile * sp)
substrate_successive_statements_optimization	optimization.c	/^void substrate_successive_statements_optimization($/;"	f	signature:( struct osl_scop * scop, struct substrate_scop_profile scop_profile)
substrate_uniformly_gen_set_constructor	reuse.c	/^struct substrate_uniformly_generated_set substrate_uniformly_gen_set_constructor($/;"	f	signature:( struct osl_relation_list * uniformly_generated_set)
substrate_uniformly_generated_set_add	reuse_struct.c	/^struct substrate_uniformly_generated_set substrate_uniformly_generated_set_add($/;"	f	signature:( struct substrate_uniformly_generated_set ugs1, struct substrate_uniformly_generated_set ugs2)
substrate_uniformly_generated_set_clone	reuse_struct.c	/^struct substrate_uniformly_generated_set substrate_uniformly_generated_set_clone($/;"	f	signature:( struct substrate_uniformly_generated_set ugs)
substrate_uniformly_generated_set_dump	reuse_struct.c	/^void substrate_uniformly_generated_set_dump($/;"	f	signature:( FILE * output_stream, struct substrate_uniformly_generated_set * ugs)
substrate_uniformly_generated_set_free	reuse_struct.c	/^void substrate_uniformly_generated_set_free($/;"	f	signature:( struct substrate_uniformly_generated_set * ugs)
